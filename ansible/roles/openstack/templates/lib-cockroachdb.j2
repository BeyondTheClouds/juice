#!/bin/bash
#
# lib/databases/cockroachdb
# Functions to control the configuration and operation of the **CockroachDB** database backend

# Dependencies:
#
# - DATABASE_{HOST,USER,PASSWORD} must be defined

# Save trace setting
_XTRACE_PG=$(set +o | grep xtrace)
set +o xtrace

register_database cockroachdb

# Functions
# ---------

# Returns the name of the protocol for SQLAlchemy url connexion
function get_database_type_cockroachdb {
    echo cockroachdb
}

# Get rid of everything enough to cleanly change database backends
function cleanup_database_cockroachdb {
    # Handled by cockroachdb/tasks/destroy.yml
    return
}

function recreate_database_cockroachdb {
    local db=$1
    {% if inventory_hostname == dbmaster_node %}
    sudo docker exec -i cockroachdb-{{ inventory_hostname_short }} \
	   ./cockroach sql --execute "DROP DATABASE IF EXISTS $db CASCADE" --insecure

    sudo docker exec -i cockroachdb-{{ inventory_hostname_short }} \
	   ./cockroach sql --execute "CREATE DATABASE $db ENCODING = 'UTF8'" --insecure
    {% else %}
    while true
    do
	output=$(sudo docker exec -i cockroachdb-{{ inventory_hostname_short }} \
			./cockroach sql --insecure \
			--execute "select * from [SHOW DATABASES] where \"Database\" = 'keystone'" | \
	           fgrep "row")
        if [[ "$output" == "# 1 row" ]]
        then
	    if [[ $(sudo docker exec -i cockroachdb-{{ inventory_hostname_short }} ./cockroach sql --execute "SHOW TABLES FROM keystone" --insecure | grep 'migrate_version') == 'migrate_version' ]]
	    then
		# waiting for the 24th migrations of keystone contract which is supposed to be the last
		if [[ $(sudo docker exec -i cockroachdb-{{ inventory_hostname_short }} \
			      ./cockroach sql --insecure \
			      --execute "select version from keystone.migrate_version where repository_id = 'keystone_contract'" | fgrep "24") == "24" ]]
		then
		    break
		else
		    echo "Waiting for migrations to finish"
		    sleep 60
		fi
	    else
		echo "Waiting for migrations"
		sleep 5
	    fi
	else
	    echo "Waiting for database $db to be up"
	    sleep 5
	fi
    done

    {% endif %}
}

function configure_database_cockroachdb {
    # Handled by cockroachdb/tasks/deploy.yml
    return
}

function install_database_cockroachdb {
    # Handled by cockroachdb/tasks/deploy.yml
    return
}

function install_database_python_cockroachdb {
    # Mostly handled by deploy.yml
    return
}

function database_connection_url_cockroachdb {
    local db=$1
    echo "$BASE_SQL_CONN:26257/$db?client_encoding=utf8"
}

# Restore xtrace
$_XTRACE_PG

# Local variables:
# mode: shell-script
# End:
